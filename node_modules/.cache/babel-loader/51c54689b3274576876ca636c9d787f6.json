{"ast":null,"code":"import firebase from \"firebase\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\"; // import uuid from \"react-uuid\";\n//uuid 활용\n//window.sessionStorage.setItem(\"userId\", uuid());\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBptMJhUc4gjRfOHNYhybCgfQO5YQLdP3E\",\n  authDomain: \"reactfirebase-30c10.firebaseapp.com\",\n  databaseURL: \"https://reactfirebase-30c10-default-rtdb.firebaseio.com\",\n  projectId: \"reactfirebase-30c10\",\n  storageBucket: \"reactfirebase-30c10.appspot.com\",\n  messagingSenderId: \"440103573360\",\n  appId: \"1:440103573360:web:715853e90fb1563a8a61b5\",\n  measurementId: \"G-S9BB5XF3JP\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig); // userId 중복없이 랜덤숫자 생성 \n\nconst random = () => {\n  let number = []; // 숫자를 넣어 중복을 확인할 배열\n\n  let output = window.localStorage.getItem(\"ranNum\");\n\n  if (!output) {\n    window.localStorage.setItem(\"ranNum\", JSON.stringify(number));\n  } else {\n    number = JSON.parse(output);\n  }\n\n  back: while (true) {\n    let ranNum = Math.floor(Math.random() * 20 + 1); //1~10까지 숫자\n\n    if (number.indexOf(ranNum) === -1) {\n      // 중복숫자가 없으면\n      number.push(ranNum);\n      window.localStorage.setItem(\"ranNum\", JSON.stringify(number)); // 숫자배열 로컬스토리지에 저장\n\n      window.sessionStorage.setItem(\"userId\", ranNum); // 랜덤 숫자 세션스토리지 저장\n\n      break;\n    } else {\n      // 있으면 다시 숫자 뽑기\n      continue back;\n    }\n  }\n};\n\nrandom();\nlet userId = window.sessionStorage.getItem(\"userId\"); // 데이터 쓰기\n\nconst CreateUser = (userName, userPhone) => {\n  const userListRef = firebase.database().ref('Users');\n  const newUserRef = userListRef.child('User' + userId);\n  newUserRef.set({\n    userId: JSON.parse(userId),\n    userName: userName,\n    userPhone: userPhone\n  });\n}; // 숫자 버튼 클릭시 업데이트\n\n\n_c = CreateUser;\n\nconst UpdateNum = num => {\n  const userId = window.sessionStorage.getItem(\"userId\");\n  firebase.database().ref('Users').child('User' + userId).update({\n    count: num\n  });\n}; // // 데이터 읽기 -- 중복 회원가입 안 되게\n\n\n_c2 = UpdateNum;\n\nconst ReadUser = (userName, userPhone) => {\n  //휴대폰 번호로 판단\n  const rootRef = firebase.database().ref();\n  rootRef.child('Users').orderByChild('userPhone').equalTo(userPhone).on(\"value\", snapshot => {\n    if (snapshot.exists()) {\n      console.log(\"exists!\");\n      console.log(snapshot.val());\n    } else {\n      console.log(\"not exists!\");\n      CreateUser(userName, userPhone);\n    }\n  });\n}; // 필요한 곳에서 사용할 수 있도록 내보내기\n\n\n_c3 = ReadUser;\nexport { CreateUser, UpdateNum, ReadUser };\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CreateUser\");\n$RefreshReg$(_c2, \"UpdateNum\");\n$RefreshReg$(_c3, \"ReadUser\");","map":{"version":3,"sources":["C:/Users/Genie/Desktop/Genie_react_firebase/src/Firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","random","number","output","window","localStorage","getItem","setItem","JSON","stringify","parse","back","ranNum","Math","floor","indexOf","push","sessionStorage","userId","CreateUser","userName","userPhone","userListRef","database","ref","newUserRef","child","set","UpdateNum","num","update","count","ReadUser","rootRef","orderByChild","equalTo","on","snapshot","exists","console","log","val"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n// import uuid from \"react-uuid\";\r\n//uuid 활용\r\n//window.sessionStorage.setItem(\"userId\", uuid());\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyBptMJhUc4gjRfOHNYhybCgfQO5YQLdP3E\",\r\n  authDomain: \"reactfirebase-30c10.firebaseapp.com\",\r\n  databaseURL: \"https://reactfirebase-30c10-default-rtdb.firebaseio.com\",\r\n  projectId: \"reactfirebase-30c10\",\r\n  storageBucket: \"reactfirebase-30c10.appspot.com\",\r\n  messagingSenderId: \"440103573360\",\r\n  appId: \"1:440103573360:web:715853e90fb1563a8a61b5\",\r\n  measurementId: \"G-S9BB5XF3JP\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\n// userId 중복없이 랜덤숫자 생성 \r\nconst random = () => {  \r\n  let number = []; // 숫자를 넣어 중복을 확인할 배열\r\n  let output = window.localStorage.getItem(\"ranNum\");\r\n    \r\n  if(!output){\r\n    window.localStorage.setItem(\"ranNum\", JSON.stringify(number));\r\n  }else{\r\n    number = JSON.parse(output);\r\n  }\r\n  \r\n  back:\r\n  while(true){\r\n    let ranNum = Math.floor(Math.random()*20+1); //1~10까지 숫자\r\n  \r\n    if(number.indexOf(ranNum) === -1){ // 중복숫자가 없으면\r\n      number.push(ranNum);\r\n      window.localStorage.setItem(\"ranNum\", JSON.stringify(number)); // 숫자배열 로컬스토리지에 저장\r\n      window.sessionStorage.setItem(\"userId\", ranNum); // 랜덤 숫자 세션스토리지 저장\r\n      break;\r\n    }else{ // 있으면 다시 숫자 뽑기\r\n      continue back;\r\n    }\r\n  }\r\n}\r\n\r\nrandom();\r\nlet userId = window.sessionStorage.getItem(\"userId\");\r\n\r\n// 데이터 쓰기\r\nconst CreateUser = (userName, userPhone) => {\r\n  const userListRef = firebase.database().ref('Users');\r\n  const newUserRef = userListRef.child('User' + userId);\r\n  \r\n  newUserRef.set({\r\n    userId: JSON.parse(userId),\r\n    userName: userName,\r\n    userPhone: userPhone\r\n  });\r\n}\r\n\r\n\r\n// 숫자 버튼 클릭시 업데이트\r\nconst UpdateNum = (num) => {\r\n  const userId = window.sessionStorage.getItem(\"userId\");\r\n  firebase.database().ref('Users').child('User' + userId ).update({\r\n  count: num\r\n  });\r\n}\r\n\r\n\r\n// // 데이터 읽기 -- 중복 회원가입 안 되게\r\nconst ReadUser = (userName, userPhone) => { //휴대폰 번호로 판단\r\n  const rootRef = firebase.database().ref()\r\n  rootRef.child('Users').orderByChild('userPhone').equalTo(userPhone).on(\"value\", snapshot => {\r\n    if (snapshot.exists()){\r\n      console.log(\"exists!\");\r\n      console.log(snapshot.val())\r\n    }else{\r\n      console.log(\"not exists!\");\r\n      CreateUser(userName, userPhone);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n// 필요한 곳에서 사용할 수 있도록 내보내기\r\nexport {CreateUser, UpdateNum, ReadUser};\r\n"]},"metadata":{},"sourceType":"module"}