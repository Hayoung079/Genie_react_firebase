{"ast":null,"code":"import firebase from \"firebase\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport Counter from './Counter'; // import uuid from \"react-uuid\";\n//uuid 활용\n//window.sessionStorage.setItem(\"userId\", uuid());\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBptMJhUc4gjRfOHNYhybCgfQO5YQLdP3E\",\n  authDomain: \"reactfirebase-30c10.firebaseapp.com\",\n  databaseURL: \"https://reactfirebase-30c10-default-rtdb.firebaseio.com\",\n  projectId: \"reactfirebase-30c10\",\n  storageBucket: \"reactfirebase-30c10.appspot.com\",\n  messagingSenderId: \"440103573360\",\n  appId: \"1:440103573360:web:715853e90fb1563a8a61b5\",\n  measurementId: \"G-S9BB5XF3JP\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\nlet number = []; // 숫자를 넣어 중복을 확인할 배열\n\nlet localNum = window.localStorage.getItem(\"ranNum\");\n\nif (!localNum) {\n  window.localStorage.setItem(\"ranNum\", JSON.stringify(number));\n} else {\n  number = JSON.parse(localNum);\n} // userId 중복없이 랜덤숫자 생성 \n\n\nconst random = () => {\n  back: while (true) {\n    let ranNum = Math.floor(Math.random() * 20 + 1); //1~20까지 숫자\n\n    if (number.indexOf(ranNum) === -1) {\n      // 중복숫자가 없으면\n      number.push(ranNum);\n      window.localStorage.setItem(\"ranNum\", JSON.stringify(number)); // 로컬스토리지에 숫자배열 저장\n\n      window.sessionStorage.setItem(\"userId\", ranNum); // 랜덤 숫자 세션스토리지 저장\n\n      break;\n    } else {\n      // 있으면 다시 숫자 뽑기\n      continue back;\n    }\n  }\n}; // 데이터 쓰기\n\n\nconst CreateUser = (userName, userPhone) => {\n  const userId = window.sessionStorage.getItem(\"userId\");\n  const userListRef = firebase.database().ref('Users');\n  const newUserRef = userListRef.child('User' + userId);\n  newUserRef.set({\n    userId: JSON.parse(userId),\n    userName: userName,\n    userPhone: userPhone\n  });\n}; // 숫자 버튼 클릭시 업데이트\n\n\n_c = CreateUser;\n\nconst UpdateNum = num => {\n  const userId = window.sessionStorage.getItem(\"userId\");\n  firebase.database().ref('Users').child('User' + userId).update({\n    count: num\n  });\n}; // 기존 회원 카운트\n\n\n_c2 = UpdateNum;\n\nconst UpdateNumLogin = (num, userId) => {\n  firebase.database().ref('Users').child('User' + userId).update({\n    count: num\n  });\n}; // // 데이터 읽기 -- 중복 회원가입 안 되게\n\n\n_c3 = UpdateNumLogin;\n\nconst ReadUser = (userName, userPhone) => {\n  //휴대폰 번호로 판단\n  random();\n  const phoneRef = firebase.database().ref('Users').orderByChild('userPhone').equalTo(userPhone);\n  phoneRef.once(\"value\", function (snapshot) {\n    if (snapshot.exists()) {\n      console.log(\"exists!\"); // 일치하는 노드에 (userId) count++ 하기\n\n      const userIdObj = snapshot.val()[Object.keys(snapshot.val())[0]];\n      const userCount = userIdObj[Object.keys(userIdObj)[0]];\n      const userId = userIdObj[Object.keys(userIdObj)[1]];\n      UpdateNumLogin(userCount, userId); // localStorage에 배열 마지막 값 삭제하기\n\n      number.pop();\n      window.localStorage.setItem(\"ranNum\", JSON.stringify(number));\n    } else {\n      console.log(\"not exists!\");\n      CreateUser();\n    }\n  });\n}; // 필요한 곳에서 사용할 수 있도록 내보내기\n\n\n_c4 = ReadUser;\nexport { CreateUser, UpdateNum, ReadUser };\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"CreateUser\");\n$RefreshReg$(_c2, \"UpdateNum\");\n$RefreshReg$(_c3, \"UpdateNumLogin\");\n$RefreshReg$(_c4, \"ReadUser\");","map":{"version":3,"sources":["C:/Users/Genie/Desktop/Genie_react_firebase/src/Firebase.js"],"names":["firebase","Counter","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","number","localNum","window","localStorage","getItem","setItem","JSON","stringify","parse","random","back","ranNum","Math","floor","indexOf","push","sessionStorage","CreateUser","userName","userPhone","userId","userListRef","database","ref","newUserRef","child","set","UpdateNum","num","update","count","UpdateNumLogin","ReadUser","phoneRef","orderByChild","equalTo","once","snapshot","exists","console","log","userIdObj","val","Object","keys","userCount","pop"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport Counter from './Counter';\r\n// import uuid from \"react-uuid\";\r\n//uuid 활용\r\n//window.sessionStorage.setItem(\"userId\", uuid());\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyBptMJhUc4gjRfOHNYhybCgfQO5YQLdP3E\",\r\n  authDomain: \"reactfirebase-30c10.firebaseapp.com\",\r\n  databaseURL: \"https://reactfirebase-30c10-default-rtdb.firebaseio.com\",\r\n  projectId: \"reactfirebase-30c10\",\r\n  storageBucket: \"reactfirebase-30c10.appspot.com\",\r\n  messagingSenderId: \"440103573360\",\r\n  appId: \"1:440103573360:web:715853e90fb1563a8a61b5\",\r\n  measurementId: \"G-S9BB5XF3JP\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nlet number = []; // 숫자를 넣어 중복을 확인할 배열\r\nlet localNum = window.localStorage.getItem(\"ranNum\");\r\n  \r\nif(!localNum){\r\n  window.localStorage.setItem(\"ranNum\", JSON.stringify(number));\r\n}else{\r\n  number = JSON.parse(localNum);\r\n}\r\n\r\n// userId 중복없이 랜덤숫자 생성 \r\nconst random = () => {   \r\n  \r\n  back:\r\n  while(true){\r\n    let ranNum = Math.floor(Math.random()*20+1); //1~20까지 숫자\r\n  \r\n    if(number.indexOf(ranNum) === -1){ // 중복숫자가 없으면\r\n      number.push(ranNum);\r\n      window.localStorage.setItem(\"ranNum\", JSON.stringify(number)); // 로컬스토리지에 숫자배열 저장\r\n      window.sessionStorage.setItem(\"userId\", ranNum); // 랜덤 숫자 세션스토리지 저장\r\n      break;\r\n    }else{ // 있으면 다시 숫자 뽑기\r\n      continue back;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// 데이터 쓰기\r\nconst CreateUser = (userName, userPhone) => {\r\n  const userId = window.sessionStorage.getItem(\"userId\");\r\n  const userListRef = firebase.database().ref('Users');\r\n  const newUserRef = userListRef.child('User' + userId);\r\n  \r\n  newUserRef.set({\r\n    userId: JSON.parse(userId),\r\n    userName: userName,\r\n    userPhone: userPhone\r\n  });\r\n}\r\n\r\n\r\n// 숫자 버튼 클릭시 업데이트\r\nconst UpdateNum = (num) => {\r\n  const userId = window.sessionStorage.getItem(\"userId\");\r\n  firebase.database().ref('Users').child('User' + userId ).update({\r\n    count: num\r\n  });\r\n}\r\n\r\n// 기존 회원 카운트\r\nconst UpdateNumLogin = (num, userId) => {\r\n  firebase.database().ref('Users').child('User' + userId ).update({\r\n    count: num\r\n  });\r\n}\r\n\r\n\r\n// // 데이터 읽기 -- 중복 회원가입 안 되게\r\nconst ReadUser = (userName, userPhone) => { //휴대폰 번호로 판단\r\n  random();\r\n\r\n  const phoneRef = firebase.database().ref('Users').orderByChild('userPhone').equalTo(userPhone);\r\n  phoneRef.once(\"value\", function(snapshot){\r\n    if (snapshot.exists()){\r\n      console.log(\"exists!\");\r\n\r\n      // 일치하는 노드에 (userId) count++ 하기\r\n      const userIdObj= snapshot.val()[Object.keys(snapshot.val())[0]];\r\n      const userCount = userIdObj[Object.keys(userIdObj)[0]];\r\n      const userId = userIdObj[Object.keys(userIdObj)[1]];\r\n\r\n      UpdateNumLogin(userCount, userId);\r\n\r\n      // localStorage에 배열 마지막 값 삭제하기\r\n      number.pop();\r\n      window.localStorage.setItem(\"ranNum\", JSON.stringify(number));\r\n    }else{\r\n      console.log(\"not exists!\");\r\n      CreateUser();\r\n    }\r\n  });\r\n}\r\n\r\n\r\n// 필요한 곳에서 사용할 수 있도록 내보내기\r\nexport {CreateUser, UpdateNum, ReadUser};\r\n"]},"metadata":{},"sourceType":"module"}