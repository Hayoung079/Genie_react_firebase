{"ast":null,"code":"import firebase from \"firebase\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\"; // import uuid from \"react-uuid\";\n//uuid 활용\n//window.sessionStorage.setItem(\"userId\", uuid());\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBptMJhUc4gjRfOHNYhybCgfQO5YQLdP3E\",\n  authDomain: \"reactfirebase-30c10.firebaseapp.com\",\n  databaseURL: \"https://reactfirebase-30c10-default-rtdb.firebaseio.com\",\n  projectId: \"reactfirebase-30c10\",\n  storageBucket: \"reactfirebase-30c10.appspot.com\",\n  messagingSenderId: \"440103573360\",\n  appId: \"1:440103573360:web:715853e90fb1563a8a61b5\",\n  measurementId: \"G-S9BB5XF3JP\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig); // userId 중복없이 랜덤숫자 생성 \n\nconst random = () => {\n  let number = []; // 숫자를 넣어 중복을 확인할 배열\n\n  let output = window.localStorage.getItem(\"ranNum\");\n\n  if (!output) {\n    window.localStorage.setItem(\"ranNum\", JSON.stringify(number));\n  } else {\n    number = JSON.parse(output);\n  }\n\n  back: while (true) {\n    let ranNum = Math.floor(Math.random() * 20 + 1); //1~10까지 숫자\n\n    if (number.indexOf(ranNum) === -1) {\n      // 중복숫자가 없으면\n      number.push(ranNum);\n      window.localStorage.setItem(\"ranNum\", JSON.stringify(number)); // 숫자배열 로컬스토리지에 저장\n\n      window.sessionStorage.setItem(\"userId\", ranNum); // 랜덤 숫자 세션스토리지 저장\n\n      break;\n    } else {\n      // 있으면 다시 숫자 뽑기\n      continue back;\n    }\n  }\n}; // 데이터 쓰기\n\n\nconst CreateUser = (userName, userPhone) => {\n  random();\n  let userId = window.sessionStorage.getItem(\"userId\");\n  const userListRef = firebase.database().ref('Users');\n  const newUserRef = userListRef.child('User' + userId);\n  newUserRef.set({\n    userId: JSON.parse(userId),\n    userName: userName,\n    userPhone: userPhone\n  });\n}; // 숫자 버튼 클릭시 업데이트\n\n\n_c = CreateUser;\n\nconst UpdateNum = num => {\n  let userId = window.sessionStorage.getItem(\"userId\");\n  firebase.database().ref('Users').child('User' + userId).update({\n    count: num\n  });\n}; // // 데이터 읽기 -- 중복 회원가입 없게\n\n\n_c2 = UpdateNum;\n\nconst ReadUser = userPhone => {\n  //휴대폰 번호로 판단\n  firebase.database().ref().child('Users').orderByChild('userPhone').equalTo(userPhone).on(\"value\", snapshot => {\n    if (snapshot.exists()) {\n      console.log(\"exists!\");\n      const phone = snapshot.val();\n      console.log(phone);\n      return true;\n    } else {\n      console.log(\"not exists!\");\n      return false;\n    }\n  });\n}; // 필요한 곳에서 사용할 수 있도록 내보내기\n\n\n_c3 = ReadUser;\nexport { CreateUser, UpdateNum, ReadUser };\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CreateUser\");\n$RefreshReg$(_c2, \"UpdateNum\");\n$RefreshReg$(_c3, \"ReadUser\");","map":{"version":3,"sources":["C:/Users/Genie/Desktop/Genie_react_firebase/src/Firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","random","number","output","window","localStorage","getItem","setItem","JSON","stringify","parse","back","ranNum","Math","floor","indexOf","push","sessionStorage","CreateUser","userName","userPhone","userId","userListRef","database","ref","newUserRef","child","set","UpdateNum","num","update","count","ReadUser","orderByChild","equalTo","on","snapshot","exists","console","log","phone","val"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n// import uuid from \"react-uuid\";\r\n//uuid 활용\r\n//window.sessionStorage.setItem(\"userId\", uuid());\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyBptMJhUc4gjRfOHNYhybCgfQO5YQLdP3E\",\r\n  authDomain: \"reactfirebase-30c10.firebaseapp.com\",\r\n  databaseURL: \"https://reactfirebase-30c10-default-rtdb.firebaseio.com\",\r\n  projectId: \"reactfirebase-30c10\",\r\n  storageBucket: \"reactfirebase-30c10.appspot.com\",\r\n  messagingSenderId: \"440103573360\",\r\n  appId: \"1:440103573360:web:715853e90fb1563a8a61b5\",\r\n  measurementId: \"G-S9BB5XF3JP\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\n// userId 중복없이 랜덤숫자 생성 \r\nconst random = () => {\r\n  let number = []; // 숫자를 넣어 중복을 확인할 배열\r\n  \r\n  let output = window.localStorage.getItem(\"ranNum\");\r\n  if(!output){\r\n    window.localStorage.setItem(\"ranNum\", JSON.stringify(number));\r\n  }else{\r\n    number = JSON.parse(output);\r\n  }\r\n\r\n  back:\r\n  while(true){\r\n    let ranNum = Math.floor(Math.random()*20+1); //1~10까지 숫자\r\n  \r\n    if(number.indexOf(ranNum) === -1){ // 중복숫자가 없으면\r\n      number.push(ranNum);\r\n      window.localStorage.setItem(\"ranNum\", JSON.stringify(number)); // 숫자배열 로컬스토리지에 저장\r\n      window.sessionStorage.setItem(\"userId\", ranNum); // 랜덤 숫자 세션스토리지 저장\r\n      break;\r\n    }else{ // 있으면 다시 숫자 뽑기\r\n      continue back;\r\n    }\r\n  }\r\n}\r\n\r\n// 데이터 쓰기\r\nconst CreateUser = (userName, userPhone) => {\r\n  random();\r\n  let userId = window.sessionStorage.getItem(\"userId\");\r\n  const userListRef = firebase.database().ref('Users');\r\n  const newUserRef = userListRef.child('User' + userId);\r\n  \r\n  newUserRef.set({\r\n    userId: JSON.parse(userId),\r\n    userName: userName,\r\n    userPhone: userPhone\r\n  });\r\n}\r\n\r\n\r\n// 숫자 버튼 클릭시 업데이트\r\nconst UpdateNum = (num) => {\r\n  let userId = window.sessionStorage.getItem(\"userId\");\r\n  firebase.database().ref('Users').child('User' + userId ).update({\r\n  count: num\r\n  });\r\n}\r\n\r\n\r\n// // 데이터 읽기 -- 중복 회원가입 없게\r\nconst ReadUser = (userPhone) => { //휴대폰 번호로 판단\r\n    firebase.database().ref().child('Users').orderByChild('userPhone').equalTo(userPhone).on(\"value\", snapshot => {\r\n      if (snapshot.exists()){\r\n        console.log(\"exists!\");\r\n        const phone = snapshot.val();\r\n        console.log(phone);\r\n        return true;\r\n      }else{\r\n        console.log(\"not exists!\");\r\n        return false;\r\n      }\r\n    });\r\n}\r\n\r\n\r\n// 필요한 곳에서 사용할 수 있도록 내보내기\r\nexport {CreateUser, UpdateNum, ReadUser};\r\n"]},"metadata":{},"sourceType":"module"}