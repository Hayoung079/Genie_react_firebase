{"ast":null,"code":"import firebase from \"firebase\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport uuid from \"react-uuid\"; // Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBptMJhUc4gjRfOHNYhybCgfQO5YQLdP3E\",\n  authDomain: \"reactfirebase-30c10.firebaseapp.com\",\n  databaseURL: \"https://reactfirebase-30c10-default-rtdb.firebaseio.com\",\n  projectId: \"reactfirebase-30c10\",\n  storageBucket: \"reactfirebase-30c10.appspot.com\",\n  messagingSenderId: \"440103573360\",\n  appId: \"1:440103573360:web:715853e90fb1563a8a61b5\",\n  measurementId: \"G-S9BB5XF3JP\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig); //uuid 활용\n//window.sessionStorage.setItem(\"userId\", uuid());\n// 중복없이 랜덤숫자 생성 \n\nconst random = () => {\n  back: while (true) {\n    let number = []; // 숫자를 넣어 중복을 확인할 배열\n\n    let output = window.localStorage.getItem(\"ranNum\");\n\n    if (!output) {\n      window.localStorage.setItem(\"ranNum\", JSON.stringify(number));\n    } else {\n      number = JSON.parse(output);\n    }\n\n    let ranNum = Math.floor(Math.random() * 10 + 1); //1~10까지 숫자\n\n    if (number.indexOf(ranNum) === -1) {\n      // 중복숫자가 없으면\n      number.push(ranNum);\n      window.localStorage.setItem(\"ranNum\", JSON.stringify(number)); // 숫자배열 로컬스토리지에 저장\n\n      window.sessionStorage.setItem(\"userId\", ranNum); // 랜덤 숫자 세션스토리지 저장\n\n      break;\n    } else {\n      break back;\n    }\n  }\n};\n\nrandom();\nlet userId = window.sessionStorage.getItem(\"userId\"); // 데이터 쓰기\n\nconst CreateUser = (userName, userPhone) => {\n  const userListRef = firebase.database().ref('User');\n  const newUserRef = userListRef.child('User' + userId);\n  newUserRef.set({\n    // userId: JSON.parse(userId),\n    userName: userName,\n    userPhone: userPhone\n  });\n}; // 숫자 버튼 클릭시 업데이트\n\n\n_c = CreateUser;\n\nconst UpdateNum = num => {\n  firebase.database().ref('User').child('User' + userId).update({\n    count: num\n  });\n}; // 필요한 곳에서 사용할 수 있도록 내보내기\n\n\n_c2 = UpdateNum;\nexport { CreateUser, UpdateNum };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CreateUser\");\n$RefreshReg$(_c2, \"UpdateNum\");","map":{"version":3,"sources":["C:/Users/Genie/Desktop/Genie_react_firebase/src/Firebase.js"],"names":["firebase","uuid","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","random","back","number","output","window","localStorage","getItem","setItem","JSON","stringify","parse","ranNum","Math","floor","indexOf","push","sessionStorage","userId","CreateUser","userName","userPhone","userListRef","database","ref","newUserRef","child","set","UpdateNum","num","update","count"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AACA,OAAOC,IAAP,MAAiB,YAAjB,C,CAEA;AACA;;AACA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,qCAFO;AAGnBC,EAAAA,WAAW,EAAE,yDAHM;AAInBC,EAAAA,SAAS,EAAE,qBAJQ;AAKnBC,EAAAA,aAAa,EAAE,iCALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAArB,C,CAUA;;AACAV,QAAQ,CAACW,aAAT,CAAuBT,cAAvB,E,CACA;AACA;AAEA;;AACA,MAAMU,MAAM,GAAG,MAAM;AACnBC,EAAAA,IAAI,EACJ,OAAM,IAAN,EAAW;AACT,QAAIC,MAAM,GAAG,EAAb,CADS,CACQ;;AAEjB,QAAIC,MAAM,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,QAA5B,CAAb;;AACA,QAAG,CAACH,MAAJ,EAAW;AACTC,MAAAA,MAAM,CAACC,YAAP,CAAoBE,OAApB,CAA4B,QAA5B,EAAsCC,IAAI,CAACC,SAAL,CAAeP,MAAf,CAAtC;AACD,KAFD,MAEK;AACHA,MAAAA,MAAM,GAAGM,IAAI,CAACE,KAAL,CAAWP,MAAX,CAAT;AACD;;AAED,QAAIQ,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACZ,MAAL,KAAc,EAAd,GAAiB,CAA5B,CAAb,CAVS,CAUoC;;AAE7C,QAAGE,MAAM,CAACY,OAAP,CAAeH,MAAf,MAA2B,CAAC,CAA/B,EAAiC;AAAE;AACjCT,MAAAA,MAAM,CAACa,IAAP,CAAYJ,MAAZ;AACAP,MAAAA,MAAM,CAACC,YAAP,CAAoBE,OAApB,CAA4B,QAA5B,EAAsCC,IAAI,CAACC,SAAL,CAAeP,MAAf,CAAtC,EAF+B,CAEgC;;AAC/DE,MAAAA,MAAM,CAACY,cAAP,CAAsBT,OAAtB,CAA8B,QAA9B,EAAwCI,MAAxC,EAH+B,CAGkB;;AACjD;AACD,KALD,MAKK;AACH,YAAMV,IAAN;AACD;AACF;AACF,CAvBD;;AAyBAD,MAAM;AAGN,IAAIiB,MAAM,GAAGb,MAAM,CAACY,cAAP,CAAsBV,OAAtB,CAA8B,QAA9B,CAAb,C,CAEA;;AACA,MAAMY,UAAU,GAAG,CAACC,QAAD,EAAWC,SAAX,KAAyB;AAC1C,QAAMC,WAAW,GAAGjC,QAAQ,CAACkC,QAAT,GAAoBC,GAApB,CAAwB,MAAxB,CAApB;AACA,QAAMC,UAAU,GAAGH,WAAW,CAACI,KAAZ,CAAkB,SAASR,MAA3B,CAAnB;AAEAO,EAAAA,UAAU,CAACE,GAAX,CAAe;AACb;AACAP,IAAAA,QAAQ,EAAEA,QAFG;AAGbC,IAAAA,SAAS,EAAEA;AAHE,GAAf;AAKD,CATD,C,CAYA;;;KAZMF,U;;AAaN,MAAMS,SAAS,GAAIC,GAAD,IAAS;AACzBxC,EAAAA,QAAQ,CAACkC,QAAT,GAAoBC,GAApB,CAAwB,MAAxB,EAAgCE,KAAhC,CAAsC,SAASR,MAA/C,EAAwDY,MAAxD,CAA+D;AAC/DC,IAAAA,KAAK,EAAEF;AADwD,GAA/D;AAGD,CAJD,C,CAQA;;;MARMD,S;AASN,SAAQT,UAAR,EAAoBS,SAApB","sourcesContent":["import firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport uuid from \"react-uuid\";\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyBptMJhUc4gjRfOHNYhybCgfQO5YQLdP3E\",\r\n  authDomain: \"reactfirebase-30c10.firebaseapp.com\",\r\n  databaseURL: \"https://reactfirebase-30c10-default-rtdb.firebaseio.com\",\r\n  projectId: \"reactfirebase-30c10\",\r\n  storageBucket: \"reactfirebase-30c10.appspot.com\",\r\n  messagingSenderId: \"440103573360\",\r\n  appId: \"1:440103573360:web:715853e90fb1563a8a61b5\",\r\n  measurementId: \"G-S9BB5XF3JP\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n//uuid 활용\r\n//window.sessionStorage.setItem(\"userId\", uuid());\r\n\r\n// 중복없이 랜덤숫자 생성 \r\nconst random = () => {\r\n  back:\r\n  while(true){\r\n    let number = []; // 숫자를 넣어 중복을 확인할 배열\r\n    \r\n    let output = window.localStorage.getItem(\"ranNum\");\r\n    if(!output){\r\n      window.localStorage.setItem(\"ranNum\", JSON.stringify(number));\r\n    }else{\r\n      number = JSON.parse(output);\r\n    }\r\n  \r\n    let ranNum = Math.floor(Math.random()*10+1); //1~10까지 숫자\r\n  \r\n    if(number.indexOf(ranNum) === -1){ // 중복숫자가 없으면\r\n      number.push(ranNum);\r\n      window.localStorage.setItem(\"ranNum\", JSON.stringify(number)); // 숫자배열 로컬스토리지에 저장\r\n      window.sessionStorage.setItem(\"userId\", ranNum); // 랜덤 숫자 세션스토리지 저장\r\n      break;\r\n    }else{\r\n      break back;\r\n    }\r\n  }\r\n}\r\n\r\nrandom();\r\n\r\n\r\nlet userId = window.sessionStorage.getItem(\"userId\");\r\n\r\n// 데이터 쓰기\r\nconst CreateUser = (userName, userPhone) => {\r\n  const userListRef = firebase.database().ref('User');\r\n  const newUserRef = userListRef.child('User' + userId);\r\n  \r\n  newUserRef.set({\r\n    // userId: JSON.parse(userId),\r\n    userName: userName,\r\n    userPhone: userPhone\r\n  });\r\n}\r\n\r\n\r\n// 숫자 버튼 클릭시 업데이트\r\nconst UpdateNum = (num) => {\r\n  firebase.database().ref('User').child('User' + userId ).update({\r\n  count: num\r\n  });\r\n}\r\n\r\n\r\n\r\n// 필요한 곳에서 사용할 수 있도록 내보내기\r\nexport {CreateUser, UpdateNum};\r\n"]},"metadata":{},"sourceType":"module"}